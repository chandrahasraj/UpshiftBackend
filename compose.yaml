services:
  backendapp:
    container_name: backendapp
    image: upshift/backendapp:latest
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PROD_DB_URL: ${PROD_DB_URL}
        DEV_DB_URL: ${DEV_DB_URL}
        PROD_PG_USER: ${PROD_PG_USER}
        DEV_PG_USER: ${DEV_PG_USER}
        PROD_PG_PASSWORD: ${PROD_PG_PASSWORD}
        DEV_PG_PASSWORD: ${DEV_PG_PASSWORD}
        PROFILE: ${PROFILE}
    ports:
      - '8080:8080'
    depends_on:
      - db
    environment:
      PROD_DB_URL: jdbc:postgresql://db:5432/mydatabase
      DEV_DB_URL: jdbc:h2:mem:db;DB_CLOSE_DELAY=-1
      PROD_PG_USER: cvvnk
      DEV_PG_USER: cvvnk
      PROD_PG_PASSWORD: secret
      DEV_PG_PASSWORD: secret
      PROFILE: production

  db:
    container_name: postgres
    image: 'postgres:latest'
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: cvvnk
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/datasources.yml:/etc/grafana/provisioning/datasources.yml
volumes:
  postgres_data: { }
